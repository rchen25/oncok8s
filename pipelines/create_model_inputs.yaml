name: Create model inputs
description: Impute unknown values (nan).
inputs:
- {name: file, type: CSV, description: 'A string containing path to input data.        '}
outputs:
- {name: output_json, type: JSON}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pandas==1.1.4' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
      --no-warn-script-location 'pandas==1.1.4' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def _make_parent_dirs_and_return_path(file_path: str):\n    import os\n   \
      \ os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return file_path\n\
      \ndef create_model_inputs(file_path,\n                            output_json):\n\
      \    \"\"\"Impute unknown values (nan).\n        Input: CSV.\n        Output:\
      \ CSV.\n\n    Args:\n        file_path: A string containing path to input data.\
      \        \n    \"\"\"\n\n    import json \n    from json import JSONEncoder\n\
      \    import numpy as np\n    import pandas as pd\n\n    class NumpyArrayEncoder(JSONEncoder):\n\
      \        def default(self, obj):\n            if isinstance(obj, np.ndarray):\n\
      \                return obj.tolist()\n            return JSONEncoder.default(self,\
      \ obj)\n\n    # Read in CSV\n    features_to_include = [\"age_'30-59'\", \"\
      age_'<30'\", \"age_'>=60'\", 'sex_?', 'sex_female',\n       'sex_male', 'histologic-type_?',\
      \ 'histologic-type_adeno',\n       'histologic-type_anaplastic', 'histologic-type_epidermoid',\n\
      \       'degree-of-diffe_?', 'degree-of-diffe_fairly', 'degree-of-diffe_poorly',\n\
      \       'degree-of-diffe_well', 'bone_no', 'bone_yes', 'bone-marrow_no',\n \
      \      'bone-marrow_yes', 'lung_no', 'lung_yes', 'pleura_no', 'pleura_yes',\n\
      \       'peritoneum_no', 'peritoneum_yes', 'liver_no', 'liver_yes', 'brain_no',\n\
      \       'brain_yes', 'skin_?', 'skin_no', 'skin_yes', 'neck_no', 'neck_yes',\n\
      \       'supraclavicular_no', 'supraclavicular_yes', 'axillar_?', 'axillar_no',\n\
      \       'axillar_yes', 'mediastinum_no', 'mediastinum_yes', 'abdominal_no',\n\
      \       'abdominal_yes']\n    column_name_labels = 'class_breast'\n\n    df\
      \ = pd.read_csv(filepath_or_buffer=file_path)\n    df_feature_matrix = df[features_to_include]\n\
      \    df_X = df_feature_matrix\n    df_y = df[column_name_labels]\n\n    ## output:\
      \ JSON\n    d_output = {\"X\": np.array(df_X),\n                \"y\": np.array(df_y),\n\
      \                \"feature_names\": np.array(df_feature_matrix.columns)}\n\n\
      \    json_string_output = json.dumps(d_output, cls=NumpyArrayEncoder)\n\n  \
      \  ### write json file\n    with open(output_json, 'w') as outfile:\n      \
      \  outfile.write(json_string_output)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Create\
      \ model inputs', description='Impute unknown values (nan).')\n_parser.add_argument(\"\
      --file\", dest=\"file_path\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--output-json\", dest=\"output_json\", type=_make_parent_dirs_and_return_path,\
      \ required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\
      \n_outputs = create_model_inputs(**_parsed_args)\n"
    args:
    - --file
    - {inputPath: file}
    - --output-json
    - {outputPath: output_json}
