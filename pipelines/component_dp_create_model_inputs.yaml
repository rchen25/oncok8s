name: Create model inputs
description: Impute unknown values (nan).
inputs:
- {name: file_path_features, type: CSV}
- {name: file_path_target, type: CSV}
outputs:
- {name: output_json, type: JSON}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pandas==1.1.4' 'scikit-learn==1.0.2' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3
      -m pip install --quiet --no-warn-script-location 'pandas==1.1.4' 'scikit-learn==1.0.2'
      --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def _make_parent_dirs_and_return_path(file_path: str):\n    import os\n   \
      \ os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return file_path\n\
      \ndef create_model_inputs(file_path_features,\n                        file_path_target,\n\
      \                            output_json):\n    \"\"\"Impute unknown values\
      \ (nan).\n        Input: CSV.\n        Output: CSV.\n\n    Args:\n        file_path:\
      \ A string containing path to input data.        \n    \"\"\"\n\n    import\
      \ json \n    from json import JSONEncoder\n    import numpy as np\n    import\
      \ pandas as pd\n    from sklearn import preprocessing\n    from sklearn.model_selection\
      \ import train_test_split\n\n    class NumpyArrayEncoder(JSONEncoder):\n   \
      \     def default(self, obj):\n            if isinstance(obj, np.ndarray):\n\
      \                return obj.tolist()\n            return JSONEncoder.default(self,\
      \ obj)\n\n    # Read in feature df and make X\n\n    df_feature_matrix = pd.read_csv(filepath_or_buffer=file_path_features)\n\
      \    df_X = df_feature_matrix\n    X = np.array(df_X)\n    feature_names = np.array(df_feature_matrix.columns)\n\
      \n    # Read in target df and make y\n    df_target = pd.read_csv(filepath_or_buffer=file_path_target)\
      \ # one-column df\n    df_y = df_target # one-column df\n    y = np.array(df_y)\n\
      \n    # If needed, binarize one-vs-all\n    ## https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelBinarizer.html\n\
      \    lb = preprocessing.LabelBinarizer()\n    lb.fit(y)\n    target_class_names\
      \ = lb.classes_\n    y_binarized = lb.transform(y) # can be multi-dimensional\
      \ array if there are more than 2 classes\n\n    # Train and test split - with\
      \ labels for y\n    X_train, X_test, y_train_labels, y_test_labels = train_test_split(\n\
      \                                            X, y, test_size=0.25, random_state=42)\
      \ \n\n    # Train and test split - one-hot encoded y\n    X_train, X_test, y_train_one_hot,\
      \ y_test_one_hot = train_test_split(\n                                     \
      \       X, y_binarized, test_size=0.25, random_state=42) \n\n    ## output:\
      \ JSON\n    d_output = {\"X\": np.array(X),\n                \"y\": y,\n   \
      \             \"X_train\": X_train,\n                \"X_test\": X_test,\n \
      \               \"y_train_labels\": y_train_labels,\n                \"y_test_labels\"\
      : y_test_labels,\n                \"y_train_one_hot\": y_train_one_hot,\n  \
      \              \"y_test_one_hot\": y_test_one_hot,\n                \"X_feature_names\"\
      : feature_names,\n                \"y_target_class_names\": target_class_names}\n\
      \n    json_string_output = json.dumps(d_output, cls=NumpyArrayEncoder)\n\n \
      \   ### write json file\n    with open(output_json, 'w') as outfile:\n     \
      \   outfile.write(json_string_output)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Create\
      \ model inputs', description='Impute unknown values (nan).')\n_parser.add_argument(\"\
      --file-path-features\", dest=\"file_path_features\", type=str, required=True,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--file-path-target\", dest=\"\
      file_path_target\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      --output-json\", dest=\"output_json\", type=_make_parent_dirs_and_return_path,\
      \ required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\
      \n_outputs = create_model_inputs(**_parsed_args)\n"
    args:
    - --file-path-features
    - {inputPath: file_path_features}
    - --file-path-target
    - {inputPath: file_path_target}
    - --output-json
    - {outputPath: output_json}
