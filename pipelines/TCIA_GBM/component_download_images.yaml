name: Download images
description: Acquisition of images associated with patients listed
inputs:
- {name: file_path_patient_list, type: CSV}
outputs:
- {name: outfile_images_json, type: JSON}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'girder_client==3.1.8' 'numpy==1.21.2' 'opencv-python-headless==4.5.5.62' 'pandas==1.1.4'
      || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'girder_client==3.1.8' 'numpy==1.21.2' 'opencv-python-headless==4.5.5.62' 'pandas==1.1.4'
      --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def _make_parent_dirs_and_return_path(file_path: str):\n    import os\n   \
      \ os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return file_path\n\
      \ndef download_images(file_path_patient_list,\n                    outfile_images_json):\n\
      \    \"\"\"Acquisition of images associated with patients listed\n        in\
      \ master `patient` table. \n\n    Args:\n        file_path: A string containing\
      \ path to the tarball.\n    \"\"\"\n    import json \n    from json import JSONEncoder\n\
      \    import cv2\n    import girder_client\n    import numpy as np\n    import\
      \ pandas as pd\n\n    class NumpyArrayEncoder(JSONEncoder):\n        def default(self,\
      \ obj):\n            if isinstance(obj, np.ndarray):\n                return\
      \ obj.tolist()\n            return JSONEncoder.default(self, obj)\n\n    gc\
      \ = girder_client.GirderClient(apiUrl=\"https://api.digitalslidearchive.org/api/v1\"\
      )\n\n    # list of patients; header col name = \"bcr_patient_barcode\"\n   \
      \ df_patient_list = pd.read_csv(file_path_patient_list)\n\n    ## FYI: image\
      \ name format:\n    ##    <patient_id>-01Z-00-DX1.<string>.svs\n    ##    TCGA-02-0038-01Z-00-DX1.5E369837-371E-4845-AD78-84BB48E1A082.svs\n\
      \n    # retrieve images by ptID in list\n    l_imagelist_ptID = []\n    l_imagelist_imgID\
      \ = []\n    l_imagelist_imgContent = []\n    for ptID in df_patient_list['bcr_patient_barcode']:\n\
      \n        # get case metadata for this patient\n        caseMetadata = gc.get('tcga/case/label/%s'\
      \ % ptID)\n        # get caseId for this patient\n        caseId =  caseMetadata['tcga']['caseId']\n\
      \n        # Get images for this case ID..\n        imageData = gc.get(\"/tcga/case/%s/images\"\
      \ % caseId)\n\n        for i in imageData['data']:\n            if i['name'].split('.')[0].split('-')[-1]\
      \ == 'DX1':\n                print(i['name'],i['_id'])\n                l_imagelist_ptID.append(ptID)\n\
      \                l_imagelist_imgID.append(i['_id'])\n\n    for i in range(len(l_imagelist_imgID)):\n\
      \        # retrieve image content with image ID\n        imgID = l_imagelist_imgID[i]\n\
      \        imageThumb = gc.get(\"item/%s/tiles/thumbnail\" % imgID,jsonResp=False)\n\
      \        img_array = np.frombuffer(imageThumb.content, dtype=np.uint8)\n   \
      \     img = cv2.imdecode(img_array, cv2.IMREAD_COLOR)\n        l_imagelist_imgContent.append(img)\n\
      \n    # image shape\n    img_shape = l_imagelist_imgContent[0].shape # assume\
      \ all images are same shape\n    df_img_shape = pd.DataFrame([])\n    df_img_shape['img_shape']\
      \ = img_shape\n\n    # JSON of all images\n    d_images = dict()\n    for i\
      \ in range(len(l_imagelist_ptID)):\n        ptID = l_imagelist_ptID[i]\n   \
      \     if ptID not in d_images:\n            d_images[ptID] = []\n        d_images[ptID].append(l_imagelist_imgContent[i])\n\
      \    json_string_output = json.dumps(d_images, cls=NumpyArrayEncoder)\n\n  \
      \  # write outputs\n    ## write json file\n    with open(outfile_images_json,\
      \ 'w') as outfile:\n        outfile.write(json_string_output)\n\nimport argparse\n\
      _parser = argparse.ArgumentParser(prog='Download images', description='Acquisition\
      \ of images associated with patients listed')\n_parser.add_argument(\"--file-path-patient-list\"\
      , dest=\"file_path_patient_list\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--outfile-images-json\", dest=\"outfile_images_json\"\
      , type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)\n\
      _parsed_args = vars(_parser.parse_args())\n\n_outputs = download_images(**_parsed_args)\n"
    args:
    - --file-path-patient-list
    - {inputPath: file_path_patient_list}
    - --outfile-images-json
    - {outputPath: outfile_images_json}
