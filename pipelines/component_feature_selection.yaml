name: Feature selection
description: Impute unknown values (nan).
inputs:
- {name: file, type: JSON, description: 'A string containing path to input data.        '}
outputs:
- {name: output_json, type: JSON}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pandas==1.1.4' 'scikit-learn==1.0.2' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3
      -m pip install --quiet --no-warn-script-location 'pandas==1.1.4' 'scikit-learn==1.0.2'
      --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def _make_parent_dirs_and_return_path(file_path: str):\n    import os\n   \
      \ os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return file_path\n\
      \ndef feature_selection(file_path,\n                            output_json):\n\
      \    \"\"\"Impute unknown values (nan).\n        Input: CSV.\n        Output:\
      \ CSV.\n\n    Args:\n        file_path: A string containing path to input data.\
      \        \n    \"\"\"\n\n    import json \n    from json import JSONEncoder\n\
      \    import numpy as np\n    import pandas as pd\n\n    class NumpyArrayEncoder(JSONEncoder):\n\
      \        def default(self, obj):\n            if isinstance(obj, np.ndarray):\n\
      \                return obj.tolist()\n            return JSONEncoder.default(self,\
      \ obj)\n\n    # read in JSON\n    with open(file_path, \"r\") as read_file:\n\
      \        json_input_data = json.load(read_file)\n\n    X = np.array(json_input_data['X'])\n\
      \    y = np.array(json_input_data['y'])\n    X_feature_names = json_input_data['X_feature_names']\n\
      \    y_target_class_names = json_input_data['y_target_class_names']\n\n    #\
      \ output: JSON\n    d_output = {\"X\": X,\n                \"y\": y,\n     \
      \           \"X_feature_names\": X_feature_names, \n                \"y_target_class_names\"\
      : y_target_class_names}\n\n    json_string_output = json.dumps(d_output, cls=NumpyArrayEncoder)\n\
      \n    ## write json file\n    with open(output_json, 'w') as outfile:\n    \
      \    outfile.write(json_string_output)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Feature\
      \ selection', description='Impute unknown values (nan).')\n_parser.add_argument(\"\
      --file\", dest=\"file_path\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--output-json\", dest=\"output_json\", type=_make_parent_dirs_and_return_path,\
      \ required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\
      \n_outputs = feature_selection(**_parsed_args)\n"
    args:
    - --file
    - {inputPath: file}
    - --output-json
    - {outputPath: output_json}
