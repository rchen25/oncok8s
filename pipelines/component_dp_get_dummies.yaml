name: Get dummies
description: Distribute categorical features into separate features.
inputs:
- {name: file, type: CSV, description: A string containing path to input data.}
outputs:
- {name: output_csv_features, type: CSV}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pandas==1.1.4' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
      --no-warn-script-location 'pandas==1.1.4' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def _make_parent_dirs_and_return_path(file_path: str):\n    import os\n   \
      \ os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return file_path\n\
      \ndef get_dummies(file_path,\n                output_csv_features):\n    \"\"\
      \"Distribute categorical features into separate features.\n        Input: CSV\
      \ with categorical (and numeric) features. Assume last \n            feature\
      \ is target label. \n        Output: CSV with categorical features separated\
      \ into dummies.\n\n    Args:\n        file_path: A string containing path to\
      \ input data.\n        output_csv: A string containing path to processed data.\n\
      \    \"\"\"\n    import glob\n    import pandas as pd\n\n    df = pd.read_csv(filepath_or_buffer=file_path)\n\
      \    l_col_names = list(df.columns)\n\n    # create dummies for every col \n\
      \    df_features = df\n    df_features_dummies = pd.get_dummies(df_features)\n\
      \n    # write outputs\n    df_features_dummies.to_csv(output_csv_features, index\
      \ = False, header = True)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Get\
      \ dummies', description='Distribute categorical features into separate features.')\n\
      _parser.add_argument(\"--file\", dest=\"file_path\", type=str, required=True,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--output-csv-features\"\
      , dest=\"output_csv_features\", type=_make_parent_dirs_and_return_path, required=True,\
      \ default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n\
      _outputs = get_dummies(**_parsed_args)\n"
    args:
    - --file
    - {inputPath: file}
    - --output-csv-features
    - {outputPath: output_csv_features}
